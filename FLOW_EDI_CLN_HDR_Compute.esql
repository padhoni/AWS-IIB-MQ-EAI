

CREATE COMPUTE MODULE FLOW_EDI_CLN_HDR_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		--CALL inputLOG();
		DECLARE inPos INT 0;
		DECLARE inPos1 INT 0;
		DECLARE inStartPos INT 0;
		DECLARE msgLen INT LENGTH(InputRoot.BLOB.BLOB);
		--SET OutputRoot = InputRoot; 
		SET inPos = POSITION(X'49' || X'53' || X'41' IN InputRoot.BLOB.BLOB);
		SET inStartPos = 429;
-- 		CALL CopyMessageHeaders(); 

		--SET inPos1 = POSITION(X'49' || X'53' || X'41' IN InputRoot.BLOB.BLOB);
		--IF (inPos1 = 0) THEN
		
	--	ELSE
			
 		SET OutputRoot.MQMD.Format = MQFMT_STRING; 
 
 		SET OutputRoot.BLOB.BLOB = SUBSTRING(InputRoot.BLOB.BLOB FROM inStartPos FOR msgLen); 
		
		SET OutputRoot.MQRFH  =  NULL;
		SET OutputRoot.MQMD.CodedCharSetId = 1208;
		SET OutputRoot.MQMD.Encoding 	   = 273;
		SET OutputRoot.MQMD.Format 		   = MQFMT_STRING;
		
		SET OutputLocalEnvironment.Destination.RouterList.DestinationData.labelName = 'TO_EDIPASS';
		PROPAGATE;
		
		--END IF;
		RETURN FALSE;
	END;

-----------------------------------------------------------------------------------
	CREATE PROCEDURE inputLOG()
	BEGIN
		
		SET Environment.Variables.inputTS = CURRENT_TIMESTAMP;
		DELETE FIELD OutputRoot.MQRFH2;							  
		SET OutputRoot.MQMD.Expiry = -1;						
		SET OutputRoot.MQMD.Format = 'MQSTR';		
				
		SET OutputRoot.XMLNSC.CSLogging.InterfaceID = 'FLOW_EDI_CLN_HDR';
		SET OutputRoot.XMLNSC.CSLogging.IOFlag='I';
		SET OutputRoot.XMLNSC.CSLogging.RunTimestamp = CAST(Environment.Variables.inputTS AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss.SSSSSS');
		SET OutputRoot.XMLNSC.CSLogging.MQMsgID = InputRoot.MQMD.MsgId;
		SET OutputRoot.XMLNSC.CSLogging.MQCorrelID = InputRoot.MQMD.CorrelId;
		SET OutputRoot.XMLNSC.CSLogging.ApplKey = 'See MsgData in the Log table';
		SET OutputRoot.XMLNSC.CSLogging.MsgData = InputBody;
		SET OutputRoot.XMLNSC.CSLogging.RunTimeBroker	= BrokerName;
		SET OutputRoot.XMLNSC.CSLogging.MsgSize 	  	= 'Not required';
		SET OutputLocalEnvironment.Destination.RouterList.DestinationData.labelName = 'LOG_IN';
	  	PROPAGATE;
		
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;